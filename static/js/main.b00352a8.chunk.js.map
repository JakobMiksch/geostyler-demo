{"version":3,"sources":["ExamplesDialog.tsx","App.tsx","index.tsx","assets/logo.svg"],"names":["ExamplesDialog","props","onExampleClicked","evt","element","target","selectedStyleId","parseInt","dataset","id","setState","onOk","onOkClicked","state","exampleStyles","selectedExampleStyle","find","exampleStyle","style","name","description","circle","nestedFilter","zoomBasedPoint","alternatingLine","populationQuantiles","raster","locale","examples","GsLocale","en_US","this","visible","passThroughProps","cards","map","className","data-id","key","onClick","title","onCancel","React","defaultProps","componentName","RadioButton","Radio","Button","RadioGroup","Group","App","_sldStyleParser","SldStyleParser","_geoJsonParser","GeoJsonParser","_wfsParser","WfsParser","onLangChange","e","value","moment","graphicalEditor","codeEditor","language","compact","de_DE","es_ES","onRuleRendererChange","ruleRendererType","onCompactSwitchChange","onExamplesButtonClicked","examplesModalVisible","onExampleSelected","rules","symbolizers","kind","wellKnownName","data","src","logo","alt","layout","Item","label","onChange","defaultValue","checked","parsers","onStyleRead","onDataRead","onStyleChange","sldRendererProps","wmsBaseUrl","layer","defaultParser","showSaveButton","showCopyButton","width","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b00352a8.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport {\n  LocaleProvider,\n  Modal\n} from 'antd';\nimport { Locale } from 'antd/lib/locale-provider/index';\n\nimport './ExamplesDialog.css';\n\nimport circle from './assets/sample-styles/circle.json';\nimport nestedFilter from './assets/sample-styles/nested-filter.json';\nimport populationQuantiles from './assets/sample-styles/population-quantiles.json';\nimport zoomBasedPoint from './assets/sample-styles/zoom-based-point.json';\nimport alternatingLine from './assets/sample-styles/alternating-line.json';\nimport raster from './assets/sample-styles/raster.json';\n\nimport {\n  locale as GsLocale\n} from 'geostyler';\nimport { Style } from 'geostyler-style';\nimport { ModalProps } from 'antd/lib/modal';\n\ntype ExampleStyle = {\n  id: number,\n  name: string,\n  description?: string,\n  style: Style\n};\n\n// i18n\nexport interface ExamplesDialogLocale extends Locale {\n  examples: string;\n}\n\n// default props\ninterface ExamplesDialogDefaultProps extends Partial<ModalProps> {\n  visible: boolean;\n}\n\n// non default props\ninterface ExamplesDialogProps extends Partial<ExamplesDialogDefaultProps> {\n  onOkClicked: (style?: Style) => void;\n}\n\n// state\ninterface ExampleDialogState {\n  locale: ExamplesDialogLocale;\n  selectedStyleId?: number;\n  exampleStyles: ExampleStyle[];\n}\n\nclass ExamplesDialog extends React.Component<ExamplesDialogProps, ExampleDialogState> {\n\n  constructor(props: ExamplesDialogProps) {\n    super(props);\n    this.state = {\n      exampleStyles: [{\n        name: 'Basic Point',\n        id: 1,\n        description: '… the most simple example.',\n        style: circle as Style\n      }, {\n        name: 'Basic Point',\n        id: 2,\n        description: '… with a nested Filter',\n        style: nestedFilter as Style\n      }, {\n        name: 'Zoom based Point',\n        id: 3,\n        description: '… from GeoServer SLD Cookbook',\n        style: zoomBasedPoint as Style\n      },{\n        name: 'Alternating Line',\n        id: 4,\n        description: '… from GeoServer SLD Cookbook',\n        style: alternatingLine as Style\n      }, {\n        name: 'Classified Polygons',\n        id: 5,\n        description: '… for population. Created via classification tool.',\n        style: populationQuantiles as Style\n      }, {\n        name: 'Raster ColorMap',\n        id: 6,\n        description: '… with a multi-color gradient from GeoServer SLD Cookbook',\n        style: raster as Style\n      }],\n      locale: {\n        examples: 'Examples',\n        ...GsLocale.en_US\n      }\n    };\n  }\n\n  public static defaultProps: ExamplesDialogDefaultProps = {\n    visible: false,\n  };\n\n  public static componentName: string = 'ExamplesDialog';\n\n  onExampleClicked = (evt: React.MouseEvent<HTMLElement>) => {\n    const element: HTMLElement = evt.target as HTMLElement;\n    const selectedStyleId = parseInt(element.dataset.id as string, 10);\n    this.setState({selectedStyleId});\n  }\n\n  onOk = () => {\n    const {\n      onOkClicked\n    } = this.props;\n    const {\n      exampleStyles,\n      selectedStyleId\n    } = this.state;\n    const selectedExampleStyle = exampleStyles.find(exampleStyle => exampleStyle.id === selectedStyleId);\n    if (selectedExampleStyle && onOkClicked) {\n      onOkClicked(selectedExampleStyle.style);\n    }\n  }\n\n  public render() {\n    const {\n      visible,\n      onOkClicked,\n      ...passThroughProps\n    } = this.props;\n    const {\n      selectedStyleId,\n      exampleStyles,\n      locale\n    } = this.state;\n\n    const cards = exampleStyles!.map(exampleStyle => {\n      let className = 'example-card';\n      if (exampleStyle.id === selectedStyleId) {\n        className += ' selected';\n      }\n      return (\n        <div\n          data-id={exampleStyle.id}\n          className={className}\n          key={exampleStyle.name + exampleStyle.description}\n          onClick={this.onExampleClicked}\n          title={exampleStyle.description}\n        >\n          <span className=\"title\">{exampleStyle.name}</span>\n          <div className=\"description\">{exampleStyle.description}</div>\n        </div>\n      );\n    });\n\n    return (\n      <LocaleProvider locale={locale}>\n          <Modal\n            className=\"examples-dialog\"\n            {...passThroughProps}\n            title={locale.examples}\n            visible={visible}\n            onOk={this.onOk}\n            onCancel={() => onOkClicked()}\n          >\n            {cards}\n          </Modal>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default ExamplesDialog;\n","import * as React from 'react';\n\nimport {\n  Form,\n  LocaleProvider,\n  Radio,\n  Switch,\n  Button\n} from 'antd';\nimport { Locale } from 'antd/lib/locale-provider/index';\nimport * as moment from 'moment';\nimport 'moment/locale/de';\nimport 'moment/locale/es';\n\nimport {\n  Style as GsStyle,\n  StyleParser as GsStyleParser\n} from 'geostyler-style';\n\nimport {\n  Data as GsData\n} from 'geostyler-data';\n\nimport GeoJsonParser from 'geostyler-geojson-parser';\nimport SldStyleParser from 'geostyler-sld-parser';\nimport WfsParser from 'geostyler-wfs-parser';\n\nimport {\n  CodeEditor,\n  DataLoader,\n  locale as GsLocale,\n  Style,\n  StyleLoader\n} from 'geostyler';\n\nimport logo from './assets/logo.svg';\nimport './App.css';\nimport ExamplesDialog from './ExamplesDialog';\n\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\n// i18n\nexport interface AppLocale extends Locale {\n  graphicalEditor: string;\n  codeEditor: string;\n  language: string;\n  compact: string;\n  examples: string;\n}\n\n// default props\ninterface DefaultAppProps {\n  styleParsers: GsStyleParser[];\n}\n\n// non default props\ninterface AppProps extends Partial<DefaultAppProps> {\n}\n\n// state\ninterface AppState {\n  style: GsStyle;\n  data?: GsData;\n  locale: AppLocale;\n  compact: boolean;\n  ruleRendererType?: 'SLD' | 'OpenLayers';\n  examplesModalVisible: boolean;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n\n  private _sldStyleParser = new SldStyleParser();\n\n  private _geoJsonParser = new GeoJsonParser();\n\n  private _wfsParser = new WfsParser();\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      locale: {\n        graphicalEditor: 'Graphical Editor',\n        codeEditor: 'Code Editor',\n        language: 'Language',\n        compact: 'Compact',\n        examples: 'Examples',\n        ...GsLocale.en_US\n      },\n      compact: true,\n      ruleRendererType: 'SLD',\n      examplesModalVisible: false,\n      style: {\n        name: 'Demo Style',\n        rules: [{\n          name: 'Rule 1',\n          symbolizers: [{\n            kind: 'Mark',\n            wellKnownName: 'Circle'\n          }]\n        }]\n      }\n    };\n  }\n\n  public static componentName: string = 'App';\n\n  onLangChange = (e: any) => {\n    switch (e.target.value) {\n      case 'en':\n        moment.locale('en');\n        this.setState({\n          locale: {\n            graphicalEditor: 'Graphical Editor',\n            codeEditor: 'Code Editor',\n            language: 'Language',\n            compact: 'Compact',\n            examples: 'Examples',\n            ...GsLocale.en_US\n          }\n        });\n        break;\n      case 'de':\n        moment.locale('de');\n        this.setState({\n          locale: {\n            graphicalEditor: 'Grafischer Editor',\n            codeEditor: 'Code Editor',\n            language: 'Sprache',\n            compact: 'Kompakt',\n            examples: 'Beispiele',\n            ...GsLocale.de_DE\n          }\n        });\n        break;\n      case 'es':\n        moment.locale('es');\n        this.setState({\n          locale: {\n            graphicalEditor: 'Editor gráfico',\n            codeEditor: 'Editor de código',\n            language: 'Idioma',\n            compact: 'Compacto',\n            examples: 'Ejemplos',\n            ...GsLocale.es_ES\n          }\n        });\n        break;\n      default:\n        moment.locale('en');\n          this.setState({\n            locale: {\n              graphicalEditor: 'Graphical Editor',\n              codeEditor: 'Code Editor',\n              language: 'Language',\n              compact: 'Compact',\n              examples: 'Examples',\n              ...GsLocale.en_US\n            }\n        });\n        break;\n    }\n  }\n\n  onRuleRendererChange = (e: any) => {\n    const ruleRendererType = e.target.value;\n    this.setState({ruleRendererType});\n  }\n\n  onCompactSwitchChange = (compact: boolean) => {\n    this.setState({compact});\n  }\n\n  onExamplesButtonClicked = () => {\n    const {\n      examplesModalVisible\n    } = this.state;\n    this.setState({\n      examplesModalVisible: !examplesModalVisible\n    });\n  }\n\n  onExampleSelected = (exampleStyle?: GsStyle) => {\n    if (exampleStyle) {\n      this.setState({\n        examplesModalVisible: false,\n        style: exampleStyle\n      })\n    } else {\n      this.setState({\n        examplesModalVisible: false\n      });\n    }\n  }\n\n  public render() {\n    const {\n      examplesModalVisible,\n      locale,\n      style,\n      data,\n      compact,\n      ruleRendererType\n    } = this.state;\n    return (\n      <LocaleProvider locale={locale}>\n        <div className=\"app\">\n          <header className=\"gs-header\">\n            <span className=\"logo-title\">\n              <img className=\"logo\" src={logo} alt=\"logo\"/>\n              <span className=\"app-title\">GeoStyler</span>\n            </span>\n          </header>\n          <Form layout=\"inline\" className=\"gs-settings\">\n            <Form.Item label={locale.language}>\n              <RadioGroup\n                className=\"language-select\"\n                onChange={this.onLangChange}\n                defaultValue=\"en\"\n              >\n                <RadioButton value=\"en\">EN</RadioButton>\n                <RadioButton value=\"de\">DE</RadioButton>\n                <RadioButton value=\"es\">ES</RadioButton>\n              </RadioGroup>\n            </Form.Item>\n            <Form.Item label={locale.compact}>\n              <Switch\n                checked={compact}\n                onChange={this.onCompactSwitchChange}\n              />\n            </Form.Item>\n            <Form.Item label=\"Symbolizer Renderer\">\n              <RadioGroup\n                className=\"language-select\"\n                onChange={this.onRuleRendererChange}\n                value={ruleRendererType}\n              >\n                <RadioButton value=\"OpenLayers\">OpenLayers</RadioButton>\n                <RadioButton value=\"SLD\">SLD</RadioButton>\n              </RadioGroup>\n            </Form.Item>\n            <Form.Item>\n              <StyleLoader\n                parsers={[\n                  this._sldStyleParser\n                ]}\n                onStyleRead={(style: GsStyle) => {\n                  this.setState({style});\n                }}\n              />\n            </Form.Item>\n            <Form.Item>\n              <DataLoader\n                parsers={[\n                  this._geoJsonParser,\n                  this._wfsParser\n                ]}\n                onDataRead={(data: GsData) => {\n                  this.setState({data});\n                }}\n              />\n            </Form.Item>\n            <Form.Item>\n              <Button\n                onClick={this.onExamplesButtonClicked}\n              >\n                {locale.examples}\n              </Button>\n            </Form.Item>\n          </Form>\n          <div className=\"main-content\">\n            <div className=\"gui-wrapper\">\n              <h2>{locale.graphicalEditor}</h2>\n              <Style\n                style={style}\n                data={data}\n                onStyleChange={(style: GsStyle) => {\n                  this.setState({style});\n                }}\n                compact={compact}\n                ruleRendererType={ruleRendererType}\n                sldRendererProps={{\n                  wmsBaseUrl: 'https://ows.terrestris.de/geoserver/wms',\n                  layer: 'terrestris:bundeslaender'\n                }}\n              />\n            </div>\n            <div className=\"editor-wrapper\">\n              <h2>{locale.codeEditor}</h2>\n              <CodeEditor\n                style={style}\n                parsers={[\n                  this._sldStyleParser\n                ]}\n                defaultParser={this._sldStyleParser}\n                onStyleChange={(style: GsStyle) => {\n                  this.setState({style});\n                }}\n                showSaveButton={true}\n                showCopyButton={true}\n              />\n            </div>\n          </div>\n          <ExamplesDialog\n            visible={examplesModalVisible}\n            onOkClicked={this.onExampleSelected}\n            width=\"50%\"\n          />\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/logo.b2b95d68.svg\";"],"sourceRoot":""}