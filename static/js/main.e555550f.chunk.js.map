{"version":3,"sources":["App.tsx","index.tsx"],"names":["RadioButton","Radio","Button","RadioGroup","Group","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onLangChange","e","target","value","moment","setState","locale","GsLocale","en_US","de_DE","state","style","name","rules","symbolizers","kind","wellKnownName","_this2","react","className","locale_provider","onChange","defaultValue","dist","parsers","SldStyleParser","onStyleRead","GeoJsonParser","GeoWfsParser","onDataRead","data","onStyleChange","React","componentName","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById"],"mappings":"yaAQMA,EAAcC,IAAMC,OACpBC,EAAaF,IAAMG,MAmDnBC,cAEJ,SAAAA,EAAYC,GAAiB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAC3BE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAkBAQ,aAAe,SAACC,GACtB,OAAQA,EAAEC,OAAOC,OACf,IAAK,KACHC,SAAc,MACdX,EAAKY,SAAS,CAACC,OAAQC,SAASC,QAChC,MACF,IAAK,KACHJ,SAAc,MACdX,EAAKY,SAAS,CAACC,OAAQC,SAASE,QAChC,MACF,QACEL,SAAc,MACdX,EAAKY,SAAS,CAACC,OAAQC,SAASC,UA7BpCf,EAAKiB,MAAQ,CACXJ,OAAQC,SAASC,MACjBG,MAAO,CACLC,KAAM,aACNC,MAAO,CAAC,CACND,KAAM,SACNE,YAAa,CAAC,CACZC,KAAM,OACNC,cAAe,eAVIvB,wEAoCb,IAAAwB,EAAArB,KACNU,EAAWV,KAAKc,MAAhBJ,OACR,OACEY,EAAA,qBAAKC,UAAU,OACbD,EAAA,cAACE,EAAA,EAAD,CAAgBd,OAAQA,GACtBY,EAAA,yBACEA,EAAA,wBAAQC,UAAU,aAChBD,EAAA,cAAC7B,EAAD,CACE8B,UAAU,kBACVE,SAAUzB,KAAKI,aACfsB,aAAa,MAEbJ,EAAA,cAAChC,EAAD,CAAaiB,MAAM,MAAnB,MACAe,EAAA,cAAChC,EAAD,CAAaiB,MAAM,MAAnB,OAEFe,EAAA,oBAAIC,UAAU,aAAd,cAEFD,EAAA,qBAAKC,UAAU,YACbD,EAAA,cAACK,EAAA,YAAD,CACEC,QAAS,CACPC,KAEFC,YAAa,SAACf,GACZM,EAAKZ,SAAS,CAACM,aAGnBO,EAAA,cAACK,EAAA,WAAD,CACEC,QAAS,CACPG,IACAC,KAEFC,WAAY,SAACC,GACXb,EAAKZ,SAAS,CAACyB,aAIrBZ,EAAA,qBAAKC,UAAU,gBACbD,EAAA,qBAAKC,UAAU,eACbD,EAAA,4CACAA,EAAA,cAACK,EAAA,MAAD,CACEZ,MAAOf,KAAKc,MAAMC,MAClBmB,KAAMlC,KAAKc,MAAMoB,KACjBC,cAAe,SAACpB,GACdM,EAAKZ,SAAS,CAACM,cAIrBO,EAAA,qBAAKC,UAAU,kBACbD,EAAA,uCACAA,EAAA,cAACK,EAAA,WAAD,CACEZ,MAAOf,KAAKc,MAAMC,MAClBa,QAAS,CACPC,KAEFM,cAAe,SAACpB,GACdM,EAAKZ,SAAS,CAACM,yBA7FjBqB,aAAZzC,EAmBU0C,cAAwB,MAsFzB1C,QChKf2C,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.e555550f.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport 'antd/dist/antd.css';\n\nimport {\n  LocaleProvider,\n  Radio\n} from 'antd';\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\nimport { Locale } from 'antd/lib/locale-provider/index';\nimport * as moment from 'moment';\nimport 'moment/locale/de';\n\nimport {\n  Style as GsStyle,\n  StyleParser as GsStyleParser\n} from 'geostyler-style';\n\nimport {\n  Data as GsData\n} from 'geostyler-data';\n\nimport GeoJsonParser from 'geostyler-geojson-parser';\nimport SldStyleParser from 'geostyler-sld-parser';\nimport GeoWfsParser from 'geostyler-wfs-parser';\n\nimport './App.css';\n\nimport {\n  CodeEditor,\n  DataLoader,\n  locale as GsLocale,\n  Style,\n  StyleLoader\n} from 'geostyler';\n\n// i18n\nexport interface AppLocale extends Locale {\n  graphicalEditor: string;\n  codeEditor: string;\n}\n\n// default props\ninterface DefaultAppProps {\n  styleParsers: GsStyleParser[];\n}\n\n// non default props\ninterface AppProps extends Partial<DefaultAppProps> {\n}\n\n// state\ninterface AppState {\n  style?: GsStyle;\n  data?: GsData;\n  locale?: AppLocale;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      locale: GsLocale.en_US,\n      style: {\n        name: 'Demo Style',\n        rules: [{\n          name: 'Rule 1',\n          symbolizers: [{\n            kind: 'Mark',\n            wellKnownName: 'Circle'\n          }]\n        }]\n      }\n    };\n  }\n\n  public static componentName: string = 'App';\n\n  private onLangChange = (e: any) => {\n    switch (e.target.value) {\n      case 'en':\n        moment.locale('en');\n        this.setState({locale: GsLocale.en_US});\n        break;\n      case 'de':\n        moment.locale('de');\n        this.setState({locale: GsLocale.de_DE});\n        break;\n      default:\n        moment.locale('en');\n        this.setState({locale: GsLocale.en_US});\n        break;\n    }\n  }\n\n  public render() {\n    const { locale } = this.state;\n    return (\n      <div className=\"App\">\n        <LocaleProvider locale={locale}>\n          <div>\n            <header className=\"gs-header\">\n              <RadioGroup\n                className=\"language-select\"\n                onChange={this.onLangChange}\n                defaultValue=\"en\"\n              >\n                <RadioButton value=\"en\">EN</RadioButton>\n                <RadioButton value=\"de\">DE</RadioButton>\n              </RadioGroup>\n              <h1 className=\"App-title\">GeoStyler</h1>\n            </header>\n            <div className=\"settings\">\n              <StyleLoader\n                parsers={[\n                  SldStyleParser\n                ]}\n                onStyleRead={(style: GsStyle) => {\n                  this.setState({style});\n                }}\n              />\n              <DataLoader\n                parsers={[\n                  GeoJsonParser,\n                  GeoWfsParser\n                ]}\n                onDataRead={(data: GsData) => {\n                  this.setState({data});\n                }}\n              />\n            </div>\n            <div className=\"main-content\">\n              <div className=\"gui-wrapper\">\n                <h2>Graphical Editor</h2>\n                <Style\n                  style={this.state.style}\n                  data={this.state.data}\n                  onStyleChange={(style: GsStyle) => {\n                    this.setState({style});\n                  }}\n                />\n              </div>\n              <div className=\"editor-wrapper\">\n                <h2>Code Editor</h2>\n                <CodeEditor\n                  style={this.state.style}\n                  parsers={[\n                    SldStyleParser\n                  ]}\n                  onStyleChange={(style: GsStyle) => {\n                    this.setState({style});\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </LocaleProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}