{"version":3,"sources":["ExamplesDialog.tsx","App.tsx","index.tsx","assets/logo.svg"],"names":["ExamplesDialog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onExampleClicked","evt","selectedStyleName","target","dataset","name","setState","onOk","onOkClicked","_this$state","state","exampleStyles","selectedExampleStyle","find","exampleStyle","style","description","circle","nestedFilter","zoomBasedPoint","alternatingLine","populationQuantiles","raster","locale","objectSpread","examples","GsLocale","en_US","_this2","_this$props","visible","passThroughProps","objectWithoutProperties","_this$state2","cards","map","className","react","data-name","key","onClick","locale_provider","modal","assign","title","onCancel","React","defaultProps","componentName","RadioButton","Radio","Button","RadioGroup","Group","App","_sldStyleParser","SldStyleParser","_geoJsonParser","GeoJsonParser","_wfsParser","WfsParser","onLangChange","e","value","moment","graphicalEditor","codeEditor","language","compact","de_DE","es_ES","onRuleRendererChange","ruleRendererType","onCompactSwitchChange","onExamplesButtonClicked","examplesModalVisible","onExampleSelected","rules","symbolizers","kind","wellKnownName","data","src","logo","alt","es_form","layout","Item","label","onChange","defaultValue","es_switch","checked","dist","parsers","onStyleRead","onDataRead","es_button","onStyleChange","sldRendererProps","wmsBaseUrl","layer","defaultParser","showSaveButton","showCopyButton","src_ExamplesDialog_0","width","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.dfb67253.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport {\n  LocaleProvider,\n  Modal\n} from 'antd';\nimport { Locale } from 'antd/lib/locale-provider/index';\n\nimport './ExamplesDialog.css';\n\nimport circle from './assets/sample-styles/circle.json';\nimport nestedFilter from './assets/sample-styles/nested-filter.json';\nimport populationQuantiles from './assets/sample-styles/population-quantiles.json';\nimport zoomBasedPoint from './assets/sample-styles/zoom-based-point.json';\nimport alternatingLine from './assets/sample-styles/alternating-line.json';\nimport raster from './assets/sample-styles/raster.json';\n\nimport {\n  locale as GsLocale\n} from 'geostyler';\nimport { Style } from 'geostyler-style';\nimport { ModalProps } from 'antd/lib/modal';\n\ntype ExampleStyle = {\n  name: string,\n  description?: string,\n  style: Style\n};\n\n// i18n\nexport interface ExamplesDialogLocale extends Locale {\n  examples: string;\n}\n\n// default props\ninterface ExamplesDialogDefaultProps extends Partial<ModalProps> {\n  visible: boolean;\n}\n\n// non default props\ninterface ExamplesDialogProps extends Partial<ExamplesDialogDefaultProps> {\n  onOkClicked: (style?: Style) => void;\n}\n\n// state\ninterface ExampleDialogState {\n  locale: ExamplesDialogLocale;\n  selectedStyleName?: string;\n  exampleStyles: ExampleStyle[];\n}\n\nclass ExamplesDialog extends React.Component<ExamplesDialogProps, ExampleDialogState> {\n\n  constructor(props: ExamplesDialogProps) {\n    super(props);\n    this.state = {\n      exampleStyles: [{\n        name: 'Basic Point',\n        description: 'The most simple example.',\n        style: circle as Style\n      }, {\n        name: 'Basic Point',\n        description: '… with a nested Filter',\n        style: nestedFilter as Style\n      }, {\n        name: 'Zoom based Point',\n        description: '… from GeoServer SLD Cookbook',\n        style: zoomBasedPoint as Style\n      },{\n        name: 'Alternating Line',\n        description: '… from GeoServer SLD Cookbook',\n        style: alternatingLine as Style\n      }, {\n        name: 'Classified Polygons',\n        description: '… for population. Created via Classification tool.',\n        style: populationQuantiles as Style\n      }, {\n        name: 'Raster ColorMap',\n        description: '… with a multi-color gradient from GeoServer SLD Cookbook',\n        style: raster as Style\n      }],\n      locale: {\n        examples: 'Examples',\n        ...GsLocale.en_US\n      }\n    };\n  }\n\n  public static defaultProps: ExamplesDialogDefaultProps = {\n    visible: false,\n  };\n\n  public static componentName: string = 'ExamplesDialog';\n\n  onExampleClicked = (evt: React.MouseEvent<HTMLElement>) => {\n    const element: HTMLElement = evt.target as HTMLElement;\n    const selectedStyleName = element.dataset.name;\n    this.setState({selectedStyleName});\n  }\n\n  onOk = () => {\n    const {\n      onOkClicked\n    } = this.props;\n    const {\n      exampleStyles,\n      selectedStyleName\n    } = this.state;\n    const selectedExampleStyle = exampleStyles.find(exampleStyle => exampleStyle.name === selectedStyleName);\n    if (selectedExampleStyle && onOkClicked) {\n      onOkClicked(selectedExampleStyle.style);\n    }\n  }\n\n  public render() {\n    const {\n      visible,\n      onOkClicked,\n      ...passThroughProps\n    } = this.props;\n    const {\n      selectedStyleName,\n      exampleStyles,\n      locale\n    } = this.state;\n\n    const cards = exampleStyles!.map(exampleStyle => {\n      let className = 'example-card';\n      if (exampleStyle.name === selectedStyleName) {\n        className += ' selected';\n      }\n      return (\n        <div\n          data-name={exampleStyle.name}\n          className={className}\n          key={exampleStyle.name + exampleStyle.description}\n          onClick={this.onExampleClicked}\n        >\n          <span className=\"title\">{exampleStyle.name}</span>\n          <div className=\"description\">{exampleStyle.description}</div>\n        </div>\n      );\n    });\n\n    return (\n      <LocaleProvider locale={locale}>\n          <Modal\n            className=\"examples-dialog\"\n            {...passThroughProps}\n            title={locale.examples}\n            visible={visible}\n            onOk={this.onOk}\n            onCancel={() => onOkClicked()}\n          >\n            {cards}\n          </Modal>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default ExamplesDialog;\n","import * as React from 'react';\n\nimport {\n  Form,\n  LocaleProvider,\n  Radio,\n  Switch,\n  Button\n} from 'antd';\nimport { Locale } from 'antd/lib/locale-provider/index';\nimport * as moment from 'moment';\nimport 'moment/locale/de';\nimport 'moment/locale/es';\n\nimport {\n  Style as GsStyle,\n  StyleParser as GsStyleParser\n} from 'geostyler-style';\n\nimport {\n  Data as GsData\n} from 'geostyler-data';\n\nimport GeoJsonParser from 'geostyler-geojson-parser';\nimport SldStyleParser from 'geostyler-sld-parser';\nimport WfsParser from 'geostyler-wfs-parser';\n\nimport {\n  CodeEditor,\n  DataLoader,\n  locale as GsLocale,\n  Style,\n  StyleLoader\n} from 'geostyler';\n\nimport logo from './assets/logo.svg';\nimport './App.css';\nimport ExamplesDialog from './ExamplesDialog';\n\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\n// i18n\nexport interface AppLocale extends Locale {\n  graphicalEditor: string;\n  codeEditor: string;\n  language: string;\n  compact: string;\n  examples: string;\n}\n\n// default props\ninterface DefaultAppProps {\n  styleParsers: GsStyleParser[];\n}\n\n// non default props\ninterface AppProps extends Partial<DefaultAppProps> {\n}\n\n// state\ninterface AppState {\n  style: GsStyle;\n  data?: GsData;\n  locale: AppLocale;\n  compact: boolean;\n  ruleRendererType?: 'SLD' | 'OpenLayers';\n  examplesModalVisible: boolean;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n\n  private _sldStyleParser = new SldStyleParser();\n\n  private _geoJsonParser = new GeoJsonParser();\n\n  private _wfsParser = new WfsParser();\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      locale: {\n        graphicalEditor: 'Graphical Editor',\n        codeEditor: 'Code Editor',\n        language: 'Language',\n        compact: 'Compact',\n        examples: 'Examples',\n        ...GsLocale.en_US\n      },\n      compact: true,\n      ruleRendererType: 'SLD',\n      examplesModalVisible: false,\n      style: {\n        name: 'Demo Style',\n        rules: [{\n          name: 'Rule 1',\n          symbolizers: [{\n            kind: 'Mark',\n            wellKnownName: 'Circle'\n          }]\n        }]\n      }\n    };\n  }\n\n  public static componentName: string = 'App';\n\n  onLangChange = (e: any) => {\n    switch (e.target.value) {\n      case 'en':\n        moment.locale('en');\n        this.setState({\n          locale: {\n            graphicalEditor: 'Graphical Editor',\n            codeEditor: 'Code Editor',\n            language: 'Language',\n            compact: 'Compact',\n            examples: 'Examples',\n            ...GsLocale.en_US\n          }\n        });\n        break;\n      case 'de':\n        moment.locale('de');\n        this.setState({\n          locale: {\n            graphicalEditor: 'Grafischer Editor',\n            codeEditor: 'Code Editor',\n            language: 'Sprache',\n            compact: 'Kompakt',\n            examples: 'Beispiele',\n            ...GsLocale.de_DE\n          }\n        });\n        break;\n      case 'es':\n        moment.locale('es');\n        this.setState({\n          locale: {\n            graphicalEditor: 'Editor gráfico',\n            codeEditor: 'Editor de código',\n            language: 'Idioma',\n            compact: 'Compacto',\n            examples: 'Ejemplos',\n            ...GsLocale.es_ES\n          }\n        });\n        break;\n      default:\n        moment.locale('en');\n          this.setState({\n            locale: {\n              graphicalEditor: 'Graphical Editor',\n              codeEditor: 'Code Editor',\n              language: 'Language',\n              compact: 'Compact',\n              examples: 'Examples',\n              ...GsLocale.en_US\n            }\n        });\n        break;\n    }\n  }\n\n  onRuleRendererChange = (e: any) => {\n    const ruleRendererType = e.target.value;\n    this.setState({ruleRendererType});\n  }\n\n  onCompactSwitchChange = (compact: boolean) => {\n    this.setState({compact});\n  }\n\n  onExamplesButtonClicked = () => {\n    const {\n      examplesModalVisible\n    } = this.state;\n    this.setState({\n      examplesModalVisible: !examplesModalVisible\n    });\n  }\n\n  onExampleSelected = (exampleStyle?: GsStyle) => {\n    if (exampleStyle) {\n      this.setState({\n        examplesModalVisible: false,\n        style: exampleStyle\n      })\n    } else {\n      this.setState({\n        examplesModalVisible: false\n      });\n    }\n  }\n\n  public render() {\n    const {\n      examplesModalVisible,\n      locale,\n      style,\n      data,\n      compact,\n      ruleRendererType\n    } = this.state;\n    return (\n      <LocaleProvider locale={locale}>\n        <div className=\"app\">\n          <header className=\"gs-header\">\n            <span className=\"logo-title\">\n              <img className=\"logo\" src={logo} alt=\"logo\"/>\n              <span className=\"app-title\">GeoStyler</span>\n            </span>\n          </header>\n          <Form layout=\"inline\" className=\"gs-settings\">\n            <Form.Item label={locale.language}>\n              <RadioGroup\n                className=\"language-select\"\n                onChange={this.onLangChange}\n                defaultValue=\"en\"\n              >\n                <RadioButton value=\"en\">EN</RadioButton>\n                <RadioButton value=\"de\">DE</RadioButton>\n                <RadioButton value=\"es\">ES</RadioButton>\n              </RadioGroup>\n            </Form.Item>\n            <Form.Item label={locale.compact}>\n              <Switch\n                checked={compact}\n                onChange={this.onCompactSwitchChange}\n              />\n            </Form.Item>\n            <Form.Item label=\"Symbolizer Renderer\">\n              <RadioGroup\n                className=\"language-select\"\n                onChange={this.onRuleRendererChange}\n                value={ruleRendererType}\n              >\n                <RadioButton value=\"OpenLayers\">OpenLayers</RadioButton>\n                <RadioButton value=\"SLD\">SLD</RadioButton>\n              </RadioGroup>\n            </Form.Item>\n            <Form.Item>\n              <StyleLoader\n                parsers={[\n                  this._sldStyleParser\n                ]}\n                onStyleRead={(style: GsStyle) => {\n                  this.setState({style});\n                }}\n              />\n            </Form.Item>\n            <Form.Item>\n              <DataLoader\n                parsers={[\n                  this._geoJsonParser,\n                  this._wfsParser\n                ]}\n                onDataRead={(data: GsData) => {\n                  this.setState({data});\n                }}\n              />\n            </Form.Item>\n            <Form.Item>\n              <Button\n                onClick={this.onExamplesButtonClicked}\n              >\n                {locale.examples}\n              </Button>\n            </Form.Item>\n          </Form>\n          <div className=\"main-content\">\n            <div className=\"gui-wrapper\">\n              <h2>{locale.graphicalEditor}</h2>\n              <Style\n                style={style}\n                data={data}\n                onStyleChange={(style: GsStyle) => {\n                  this.setState({style});\n                }}\n                compact={compact}\n                ruleRendererType={ruleRendererType}\n                sldRendererProps={{\n                  wmsBaseUrl: 'https://ows.terrestris.de/geoserver/wms',\n                  layer: 'terrestris:bundeslaender'\n                }}\n              />\n            </div>\n            <div className=\"editor-wrapper\">\n              <h2>{locale.codeEditor}</h2>\n              <CodeEditor\n                style={style}\n                parsers={[\n                  this._sldStyleParser\n                ]}\n                defaultParser={this._sldStyleParser}\n                onStyleChange={(style: GsStyle) => {\n                  this.setState({style});\n                }}\n                showSaveButton={true}\n                showCopyButton={true}\n              />\n            </div>\n          </div>\n          <ExamplesDialog\n            visible={examplesModalVisible}\n            onOkClicked={this.onExampleSelected}\n            width=\"50%\"\n          />\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/logo.b2b95d68.svg\";"],"sourceRoot":""}