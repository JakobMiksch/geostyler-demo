{"version":3,"sources":["App.tsx","index.tsx"],"names":["RadioButton","Radio","Button","RadioGroup","Group","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onLangChange","e","target","value","moment","setState","locale","GsLocale","en_US","de_DE","es_ES","onRuleRendererChange","ruleRendererType","onCompactSwitchChange","compact","state","style","name","rules","symbolizers","kind","wellKnownName","_this2","_this$state","data","react","className","locale_provider","es_form","layout","Item","label","onChange","defaultValue","es_switch","checked","dist","parsers","SldStyleParser","onStyleRead","GeoJsonParser","GeoWfsParser","onDataRead","onStyleChange","sldRendererProps","wmsBaseUrl","layer","defaultParser","showSaveButton","showCopyButton","React","componentName","ReactDOM","render","react_default","a","createElement","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.df3954ac.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport 'antd/dist/antd.css';\n\nimport {\n  Form,\n  LocaleProvider,\n  Radio,\n  Switch\n} from 'antd';\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\n\nimport { Locale } from 'antd/lib/locale-provider/index';\nimport * as moment from 'moment';\nimport 'moment/locale/de';\nimport 'moment/locale/es';\n\nimport {\n  Style as GsStyle,\n  StyleParser as GsStyleParser\n} from 'geostyler-style';\n\nimport {\n  Data as GsData\n} from 'geostyler-data';\n\nimport GeoJsonParser from 'geostyler-geojson-parser';\nimport SldStyleParser from 'geostyler-sld-parser';\nimport GeoWfsParser from 'geostyler-wfs-parser';\n\nimport './App.css';\n\nimport {\n  CodeEditor,\n  DataLoader,\n  locale as GsLocale,\n  Style,\n  StyleLoader\n} from 'geostyler';\nimport FormItem from 'antd/lib/form/FormItem';\n\n// i18n\nexport interface AppLocale extends Locale {\n  graphicalEditor: string;\n  codeEditor: string;\n}\n\n// default props\ninterface DefaultAppProps {\n  styleParsers: GsStyleParser[];\n}\n\n// non default props\ninterface AppProps extends Partial<DefaultAppProps> {\n}\n\n// state\ninterface AppState {\n  style: GsStyle;\n  data?: GsData;\n  locale: AppLocale;\n  compact: boolean;\n  ruleRendererType?: 'SLD' | 'OpenLayers',\n}\n\nclass App extends React.Component<AppProps, AppState> {\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      locale: GsLocale.en_US,\n      compact: true,\n      ruleRendererType: 'SLD',\n      style: {\n        name: 'Demo Style',\n        rules: [{\n          name: 'Rule 1',\n          symbolizers: [{\n            kind: 'Mark',\n            wellKnownName: 'Circle'\n          }]\n        }]\n      }\n    };\n  }\n\n  public static componentName: string = 'App';\n\n  onLangChange = (e: any) => {\n    switch (e.target.value) {\n      case 'en':\n        moment.locale('en');\n        this.setState({locale: GsLocale.en_US});\n        break;\n      case 'de':\n        moment.locale('de');\n        this.setState({locale: GsLocale.de_DE});\n        break;\n      case 'es':\n        moment.locale('es');\n        this.setState({locale: GsLocale.es_ES});\n        break;\n      default:\n        moment.locale('en');\n        this.setState({locale: GsLocale.en_US});\n        break;\n    }\n  }\n\n  onRuleRendererChange = (e: any) => {\n    const ruleRendererType = e.target.value;\n    this.setState({ruleRendererType});\n  }\n\n  onCompactSwitchChange = (compact: boolean) => {\n    this.setState({compact});\n  }\n\n  public render() {\n    const {\n      locale,\n      style,\n      data,\n      compact,\n      ruleRendererType\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <LocaleProvider locale={locale}>\n          <div>\n            <header className=\"gs-header\">\n              <h1 className=\"App-title\">GeoStyler</h1>\n            </header>\n            <Form layout=\"inline\" className=\"gs-settings\">\n              <Form.Item label=\"Language\">\n                <RadioGroup\n                  className=\"language-select\"\n                  onChange={this.onLangChange}\n                  defaultValue=\"en\"\n                >\n                  <RadioButton value=\"en\">EN</RadioButton>\n                  <RadioButton value=\"de\">DE</RadioButton>\n                  <RadioButton value=\"es\">ES</RadioButton>\n                </RadioGroup>\n              </Form.Item>\n              <Form.Item label=\"Compact\">\n                <Switch\n                  checked={compact}\n                  onChange={this.onCompactSwitchChange}\n                />\n              </Form.Item>\n              <Form.Item label=\"Symbolizer Renderer\">\n                <RadioGroup\n                  className=\"language-select\"\n                  onChange={this.onRuleRendererChange}\n                  value={ruleRendererType}\n                >\n                  <RadioButton value=\"OpenLayers\">OpenLayers</RadioButton>\n                  <RadioButton value=\"SLD\">SLD</RadioButton>\n                </RadioGroup>\n              </Form.Item>\n              <Form.Item>\n                <StyleLoader\n                  parsers={[\n                    SldStyleParser\n                  ]}\n                  onStyleRead={(style: GsStyle) => {\n                    this.setState({style});\n                  }}\n                />\n              </Form.Item>\n              <Form.Item>\n                <DataLoader\n                  parsers={[\n                    GeoJsonParser,\n                    GeoWfsParser\n                  ]}\n                  onDataRead={(data: GsData) => {\n                    this.setState({data});\n                  }}\n                />\n              </Form.Item>\n            </Form>\n            <div className=\"main-content\">\n              <div className=\"gui-wrapper\">\n                <h2>Graphical Editor</h2>\n                <Style\n                  style={style}\n                  data={data}\n                  onStyleChange={(style: GsStyle) => {\n                    this.setState({style});\n                  }}\n                  compact={compact}\n                  ruleRendererType={ruleRendererType}\n                  sldRendererProps={{\n                    wmsBaseUrl: 'https://ows.terrestris.de/geoserver/wms',\n                    layer: 'terrestris:bundeslaender'\n                  }}\n                />\n              </div>\n              <div className=\"editor-wrapper\">\n                <h2>Code Editor</h2>\n                <CodeEditor\n                  style={style}\n                  parsers={[\n                    SldStyleParser\n                  ]}\n                  defaultParser={SldStyleParser}\n                  onStyleChange={(style: GsStyle) => {\n                    this.setState({style});\n                  }}\n                  showSaveButton={true}\n                  showCopyButton={true}\n                />\n              </div>\n            </div>\n          </div>\n        </LocaleProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}